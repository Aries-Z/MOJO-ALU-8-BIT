module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  
   .rst(rst) {
    
      
      dff counter[25]; //counter used to cycle through different states  
      fsm state = {IDLE, ADDERTEST1,ADDERTEST2,ADDERTEST3,ADDERTEST4,ADDERERRORTEST, ADDERERROR,
      BOOLEANTEST1, BOOLEANTEST2,BOOLEANTEST3, BOOLEANTEST4, BOOLEANERRORTEST,BOOLEANERROR, 
        SHIFTTEST1,SHIFTTEST2,SHIFTTEST3, SHIFTERRORTEST,SHIFTERROR,
        COMPTEST1, COMPTEST2,COMPTEST3,COMPTEST4,COMPTEST5,COMPTEST6,COMPTEST7, COMPERRORTEST, COMPERROR, END};
    }} //defining state machine states
  
  alu alu; //create alu module;
  const X = 24;
  sig out[8];
  
  

  
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    alu.a=io_dip[0]; //input a of alu is first 8 switches of IO sheild;
    alu.b=io_dip[1]; //input b of alu is second 8 switches of IO sheild;
    alu.alufn=io_dip[2][5:0]; //input alufn of alu is third 6 switches of IO sheild;
    
    io_led[0]=io_dip[0]; // first 8 led display the input a of alu;
    io_led[1]=io_dip[1]; // second 8 led display  the input b of alu;
    io_led[2]=alu.out; // third 8 led display  the output of alu;
    
    case (state.q) {
      state.IDLE: //normal functioning alu (without test)
      counter.d = 0; //clock counter is 0 when in idle state
        if (io_button[1] == 1){ //pressing "CENTER" button initiates transition to TEST states
          state.d = state.ADDERTEST1; //transition to testing the alu
        }
        
      state.ADDERTEST1: // ADDER Test case 1(ADD): 2+2= 4
      alu.alufn = 6b0; //selects addition operation of alu
      alu.a = 8b10;//input a = 2
      alu.b = 8b10;//input a = 2
      out = alu.out; //assigns output of alu to output of mojo
      io_led[0] = 8b10; //first 8 leds display input a
      io_led[1] = 8b10; //second 8 leds display input b
      counter.d = counter.q+1; //continually increases clock counter until delay time is over
        if (counter.q[X]==1&&out==8b100){ //once counter reaches defined value, and output of alu is equal to manually calculated value (CORRECT ANSWER)
          counter.d = 0; //reset counter value to 0
          state.d = state.ADDERTEST2; //move on to next test case
        }else if (counter.q[X] == 1 && out!= 8b100){ //once counter reachse defined value but output of value is not equal to calculated value (WRONG ANSWER)
          counter.d=0; //reset counter value to 0
          state.d=state.ADDERERROR;} //move to adder error state
       
        
    
          
        state.ADDERTEST2://ADDER Test case 3(SUB): 10-5 = 5
      alu.alufn = 6b1; 
      alu.a = 8b1010;
      alu.b = 8b101;
      out = alu.out;   
      io_led[0] = 8b1010;
      io_led[1] = 8b101; 
      
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b101){
          counter.d = 0;
          state.d = state.ADDERTEST3;
        }else if (counter.q[X] == 1 && out!= 8b101){
          counter.d=0;
          state.d=state.ADDERERROR;}
 
        
      state.ADDERTEST3: //ADDER Test case 8(MUL): 5*2 =10
      alu.alufn = 6b10; 
      alu.a = 8b101;
      alu.b = 8b10;
      out = alu.out; 
      io_led[0] = 8b101;
      io_led[1] = 8b10;
       
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b1010){
          counter.d = 0;
          state.d = state.ADDERERRORTEST;
        }else if (counter.q[X] == 1 && out!= 8b10100){
          counter.d=0;
          state.d=state.ADDERERROR;}
     
        
      state.ADDERERRORTEST://Simulated ADDER error test case: 4+7=!12 
      alu.alufn = 6b0; 
      alu.a = 8b100;
      alu.b = 8b111;
      out = alu.out+1; //adding 1 to output of adder to create incorrect result
      io_led[0] = 8b100;
      io_led[1] = 8b111;    
      
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b1011){ //if result is correct, move on to next test case
          counter.d = 0;
          state.d = state.BOOLEANTEST1;}
        else if (counter.q[X] == 1 && out!= 8b1011){ //else move to adder error state
          counter.d=0;
          state.d=state.ADDERERROR;}
      
      state.ADDERERROR: //ADDER ERROR
      io_led=3x{{8b11111111}};
        
        
      counter.d = counter.q+1;
        if (counter.q[X]==1){ //once counter reaches defined value
          counter.d = 0;
          state.d = state.BOOLEANTEST1;} //move to test the next unit
        
        
      state.BOOLEANTEST1: //BOOLEAN Test case 1(AND): 8b10101100  & 8b10001100 = 8b10001100
      alu.alufn = 6b11000; 
      alu.a = 8b10101100;
      alu.b = 8b10001100;
      out = alu.out; 
      io_led[0] = 8b10101100;
      io_led[1] = 8b10001100;
        
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b10001100){
          counter.d = 0;
          state.d = state.BOOLEANTEST2;
        }else if (counter.q[X] == 1 && out!= 8b10001100){
          counter.d=0;
          state.d=state.BOOLEANERROR;}
        
      state.BOOLEANTEST2: //BOOLEAN Test case 2(OR): 8b10101100  & 8b10001100 = 8b10101100;
      alu.alufn = 6b11110; 
      alu.a = 8b10101100;
      alu.b = 8b10001100;
      out = alu.out; 
      io_led[0] = 8b10101100;
      io_led[1] = 8b10001100;  
                
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b10101100){
          counter.d = 0;
          state.d = state.BOOLEANTEST3;
        }else if (counter.q[X] == 1 && out!= 8b10101100){
          counter.d=0;
          state.d=state.BOOLEANERROR;}
        
      state.BOOLEANTEST3: //BOOLEAN Test case 3(XOR): 8b10101100 ^ 8b10001100 = 8b00100000;
      alu.alufn = 6b10110; 
      alu.a = 8b10101100;
      alu.b = 8b10001100;
      out = alu.out; 
      io_led[0] = 8b10101100;
      io_led[1] = 8b10001100;  
                 
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b00100000){
          counter.d = 0;
          state.d = state.BOOLEANTEST4;
        }else if (counter.q[X] == 1 && out!= 8b00100000){
          counter.d=0;
          state.d=state.BOOLEANERROR;}
        
     state.BOOLEANTEST4: //BOOLEAN Test case 4("A"LDR): 8b10101100 (8b10001100)
      alu.alufn = 6b11010; 
      alu.a = 8b10101100;
      alu.b = 8b10001100;
      out = alu.out; 
      io_led[0] = 8b10101100;
      io_led[1] = 8b10001100; 
                 
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b10101100){
          counter.d = 0;
          state.d = state.SHIFTTEST1;
        }else if (counter.q[X] == 1 && out!= 8b10101100){
          counter.d=0;
          state.d=state.BOOLEANERROR;}
        
        
      state.BOOLEANERRORTEST: //Simulated BOOLEAN error test case: 8b10101100 && 8b00000000!=8b00000000
      alu.alufn = 6b11000; 
      alu.a = 8b10101100;
      alu.b = 8b00000000;
      out = alu.out+1; //inserting error
      io_led[0] = 8b10101100;
      io_led[1] = 8b00000000;
              
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b0){
          counter.d = 0;
          state.d = state.SHIFTTEST1;
        }else if (counter.q[X] == 1 && out!= 8b0){
          counter.d=0;
          state.d=state.BOOLEANERROR;}
                
      state.BOOLEANERROR: //BOOLEAN ERROR
      io_led=3x{{8b11111111}};
        
      counter.d = counter.q+1;
        if (counter.q[X]==1){
          counter.d = 0;
          state.d = state.SHIFTTEST1;}       
        
     state.SHIFTTEST1: //SHIFTER Test case 1(SHIFT LEFT): 8b00001101 << 2 = 8b00110100;
      alu.alufn = 6b100000; 
      alu.a = 8b00001101;
      alu.b = 8b10;
      out = alu.out; 
      io_led[0] = 8b00001101;
      io_led[1] = 8b10; 
                
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b00110100){
          counter.d = 0;
          state.d = state.SHIFTTEST3;
        }else if (counter.q[X] == 1 && out!= 8b00110100){
          counter.d=0;
          state.d=state.SHIFTERROR;}
          
      state.SHIFTTEST2: //SHIFTER Test case 2(SHIFT RIGHT): 8b00001101 >> 2 = 8b00000011;
      alu.alufn = 6b100001; 
      alu.a = 8b00001101;
      alu.b = 8b10;
      out = alu.out; 
      io_led[0] = 8b00001101;
      io_led[1] = 8b10; 
                 
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b00000011){
          counter.d = 0;
          state.d = state.SHIFTTEST3;
        }  else if (counter.q[X] == 1 && out!= 8b00000011){
          counter.d=0;
          state.d=state.SHIFTERROR;}
        
      state.SHIFTTEST3: //SHIFTER Test case 3(ARITHMETIC RIGHT SHIFT): 8b10010000 >>> 2 = 8b11100100;
      alu.alufn = 6b100011; 
      alu.a = 8b10010000;
      alu.b = 8b10;
      out = alu.out; 
      io_led[0] = 8b10010000;
      io_led[1] = 8b10; 
                
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b11100100){
          counter.d = 0;
          state.d = state.SHIFTERRORTEST;
        }  else if (counter.q[X] == 1 && out!= 8b11100100){
          counter.d=0;
          state.d=state.SHIFTERROR;}
          
      state.SHIFTERRORTEST: //SHIFTER error test case : 8b00001101 >>> 2 != 8b00001101 
      alu.alufn = 6b100001; 
      alu.a = 8b00001101;
      alu.b = 8b10;
      out = alu.out+1; 
      io_led[0] = 8b00001101;
      io_led[1] = 8b10; 
                
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b00001101){
          counter.d = 0;
          state.d = state.SHIFTERRORTEST;
        }  else if (counter.q[X] == 1 && out!= 8b00001101){
          counter.d=0;
          state.d=state.SHIFTERROR;}
                        
      state.SHIFTERROR: //SHIFTER ERROR
      io_led=3x{{8b11111111}};
        
      counter.d = counter.q+1;
        if (counter.q[X]==1){
          counter.d = 0;
          state.d = state.COMPTEST1;}   
        
        

      state.COMPTEST1: //COMP Test case 1(CMPEQ): 8b11110100 == 8b11110100 
      alu.alufn = 6b110011; 
      alu.a = 8b11110100;
      alu.b = 8b11110100;
      out = alu.out; 
      io_led[0] = 8b11110100;
      io_led[1] = 8b11110100; 
                 
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b1){
          counter.d = 0;
          state.d = state.COMPTEST2;
        }  else if (counter.q[X] == 1 && out!= 8b1){
          counter.d=0;
          state.d=state.COMPERROR;}  
        
      state.COMPTEST2: //COMP Test case 2(CMPEQ): 8b11110100 != 8b11110101
      alu.alufn = 6b110011; 
      alu.a = 8b11110100;
      alu.b = 8b11110101;
      out= alu.out; 
      io_led[0] = 8b11110101;
      io_led[1] = 8b11110100; 
                
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b0){
          counter.d = 0;
          state.d = state.COMPTEST3;
        }else if (counter.q[X] == 1 && out!= 8b0){
          counter.d=0;
          state.d=state.COMPERROR;}            
        
      state.COMPTEST3: //COMP Test case 3(CMPLT): 8b11110100 < 8b11110101
      alu.alufn = 6b110101; 
      alu.a = 8b11110100;
      alu.b = 8b11110101;
      out = alu.out; 
      io_led[0] = 8b11110100;
      io_led[1] = 8b11110101; 
                  
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b1){
          counter.d = 0;
          state.d = state.COMPTEST4;
        }else if (counter.q[X] == 1 && out!= 8b1){
          counter.d=0;
          state.d=state.COMPERROR;}                      
            
      state.COMPTEST4: //COMP Test case 4(CMPLT): 8b10001 !< 8b1010;
      alu.alufn = 6b110101; 
      alu.a = 8b10001;
      alu.b = 8b1010;
      out = alu.out; 
      io_led[0] = 8b10001;
      io_led[1] = 8b1010; 
                 
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b0){
          counter.d = 0;
          state.d = state.COMPTEST5; 
        }else if (counter.q[X] == 1 && out!= 8b0){
          counter.d=0;
          state.d=state.COMPERROR;}                                   
        
      state.COMPTEST5: //COMP Test case 5(CMPLE): 8b1000 < 8b1001
      alu.alufn = 6b110111; 
      alu.a = 8b1000;
      alu.b = 8b1001;
      out= alu.out;     
      io_led[0] = 8b1000;
      io_led[1] = 8b1001; 
            
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b1){
          counter.d = 0;
          state.d = state.COMPTEST6;
        } else if (counter.q[X] == 1 && out!= 8b1){
          counter.d=0;
          state.d=state.COMPERROR;}            
        
        
        
      state.COMPTEST6: //COMP Test case 6(CMPLE): 8b1111 !< 8b1100;
      alu.alufn = 6b110111; 
      alu.a = 8b1111;
      alu.b = 8b1100;
      out = alu.out; 
      io_led[0] = 8b1111;
      io_led[1] = 8b1100; 
               
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b0){
          counter.d = 0;
          state.d = state.COMPERRORTEST;
        }else if (counter.q[X] == 1 && out!= 8b0){
          counter.d=0;
          state.d=state.COMPERROR;} 
            
          
      state.COMPERRORTEST: //COMP error test case ): 8b1111 != 8b1111;
      alu.alufn = 6b110011; 
      alu.a = 8b1111;
      alu.b = 8b1111;
      out = alu.out-1; 
      io_led[1] = 8b1111;
      io_led[0] = 8b1111; 
               
      counter.d = counter.q+1;
        if (counter.q[X] ==1&&out==8b1){
          counter.d = 0;
          state.d = state.END;
        }else if (counter.q[X] == 1 && out!= 8b1){
          counter.d=0;
          state.d=state.COMPERROR;}     
         
          
      state.COMPERROR: //COMPARE ERROR
      io_led=3x{{8b11111111}};
        
      counter.d = counter.q+1;
        if (counter.q[X]==1){
          counter.d = 0;
          state.d = state.END;}                                                         
        
      state.END: //DONE WITH TEST
      io_led=3x{{8b11}};
        
      counter.d = counter.q+1;
        if (counter.q[X]==1){
          counter.d = 0;
          state.d = state.IDLE;} //return to statestate(IDLE state)
    }
    
        
}
  
  
}
  